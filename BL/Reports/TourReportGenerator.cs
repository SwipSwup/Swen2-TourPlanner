using System;
using System.IO;
using BL.DTOs.Report;
using QuestPDF.Fluent;
using QuestPDF.Helpers;
using QuestPDF.Infrastructure;
using log4net;
using System.Reflection;

namespace BL.Reports;

public static class TourReportGenerator
{
    private static readonly ILog log = LogManager.GetLogger(MethodBase.GetCurrentMethod().DeclaringType);

    public static void Generate(TourReportDto tour, string outputPath)
    {
        try
        {
            log.Info($"Starting tour report generation for '{tour.Name}'. Output path: {outputPath}");

            Document document = Document.Create(container =>
            {
                container.Page(page =>
                {
                    page.Size(PageSizes.A4);
                    page.Margin(2, Unit.Centimetre);
                    page.DefaultTextStyle(x => x.FontSize(12));

                    page.Header().Text($"Tour Report: {tour.Name}").FontSize(20).Bold().AlignCenter();

                    page.Content().Column(col =>
                    {
                        col.Item().Text($"From: {tour.From}   To: {tour.To}");
                        col.Item().Text($"Transport: {tour.TransportType}   Distance: {tour.Distance} km   Est. Time: {tour.EstimatedTime}");
                        col.Item().Text($"Description: {tour.Description}");

                        if (File.Exists(tour.ImagePath))
                            col.Item().Image(tour.ImagePath, ImageScaling.FitWidth);

                        col.Item().Text("Logs").FontSize(16).Bold().Underline();

                        foreach (var logEntry in tour.Logs)
                        {
                            col.Item().Text($"Date: {logEntry.DateTime:g} | Rating: {logEntry.Rating}/5 | Distance: {logEntry.TotalDistance} km | Time: {logEntry.TotalTime} | Difficulty: {logEntry.Difficulty}");
                            col.Item().Text($"Comment: {logEntry.Comment}");
                            col.Item().LineHorizontal(0.5f);
                        }
                    });

                    page.Footer().AlignCenter().Text(x => x.Span("Generated by TourPlanner").FontSize(10));
                });
            });

            document.GeneratePdf(outputPath);

            log.Info($"Tour report generation for '{tour.Name}' completed successfully.");
        }
        catch (Exception ex)
        {
            log.Error($"Error during tour report generation for '{tour.Name}'.", ex);
            throw;
        }
    }
}
